package main

import f "fmt"

func ten() {
	input := `1237651012319765432345545498010145891010
0348943105408894001056654584321036712329
9432342236717433145677723675490121903478
8541051549826522238988812106789030876569
7650760678434011032349900125699845686788
6789898730569545601456987234016768798697
4372123621078438780767076543223609894556
5201014532321029892898123456104510983045
6102306545452310121234010767040125672130
7985430696101402100765109898234534343421
8976521787210569011843210982129653254321
8907823474389678123954301011018762169870
7010910567478012335869832109800121078765
6327823498565723546778789236789630989034
5436910989367874695219654345676547876123
6785403873456965784301105654565670945210
5690342762106543287012234787654981234678
4301201659014690196543989898943272221589
5210112348323787017432170101032102100450
1290010167654896528903061232589043678321
0381201233210743434012354345672154509100
5470300344984652143023403456983893210234
6565415455675430032110512987870765210985
7432326966556721243329601070121894387876
8901457877876898358478732112434721296901
9450962340945876569569540003965780105432
2365871651232903478757651654875698987321
1671010787891212349808932787034567076670
0982107896500301256710149890123498125583
1210212783410450901223456781210321034492
0398347894323467814345069890323498503301
3457656321301556030196178765432567412212
6569845490219698123287234076781064565801
7078780185428787654876543189899873278921
8129698276538988140989812278734765103210
9234567345445679031256701345625654014765
0103216548765678120349810566010103425894
0987607239854581234569809870987912436723
1234568120123290107678712561296876543010
2109879011234103238932103450345689832123`

	lines := lines(input)
	heights := make([][]point, 10)
	for x, line := range lines {
		for y, c := range line {
			height := digits[c]
			heights[height] = append(heights[height], point{x, y, height})
		}
	}

	total := 0
	ratings := 0
	for _, point := range heights[0] {
		total += len(trace(heights, point))
		ratings += trace_rating(heights, point)
	}

	f.Printf("10) %v\n", total)
	f.Printf("10) %v\n", ratings)
}

func find(heights []point, search point) bool {
	for _, path := range heights {
		if path == search {
			return true
		}
	}
	return false
}

func trace(heights [][]point, height point) map[point]bool {
	next := []point{
		{height.x - 1, height.y, height.z + 1},
		{height.x + 1, height.y, height.z + 1},
		{height.x, height.y - 1, height.z + 1},
		{height.x, height.y + 1, height.z + 1},
	}

	score := make(map[point]bool)
	for _, search := range next {
		if find(heights[search.z], search) {
			if search.z == 9 {
				score[search] = true
			} else {
				for result := range trace(heights, search) {
					score[result] = true
				}
			}
		}
	}

	return score
}

func trace_rating(heights [][]point, height point) int {
	next := []point{
		{height.x - 1, height.y, height.z + 1},
		{height.x + 1, height.y, height.z + 1},
		{height.x, height.y - 1, height.z + 1},
		{height.x, height.y + 1, height.z + 1},
	}

	rating := 0
	for _, search := range next {
		if find(heights[search.z], search) {
			if search.z == 9 {
				rating++
			} else {
				rating += trace_rating(heights, search)
			}
		}
	}

	return rating
}
